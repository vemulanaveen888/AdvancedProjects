Spring Web Services (Spring-WS)
-------------------------------

-------------------------------
Section #1:
-------------------------------

-------------------------------
Step #1: An Overview
-------------------------------
	Course Management : Retrieve, RetrieveAll, Delete
	Concepts	  : XSD, JAXB, WSDL, Endpoint
			    SOAP, Headers, Body, Fault
			    Security, WS Security

	Tools/Framework	  : Spring, Spring Boot, Wizdler


-------------------------------
Step #2: Create a new project
-------------------------------

	new > spring boot starter project
		> groupid	 :	com.pratap
		> artifactid	 : 	course-management
	
	Dependencies : Web services,	JPA,	H2

	

-------------------------------
Step #3: Overview of Creating SOAP Webservices Using contract first approach
-------------------------------

We will create a simple SOAP Webservice using spring-webservice.

Spring-WS promotes a contract first approach to create webservice, that means, you will define the format of the request and response before you start with developing your webservice.



Service Definition 	: XML, XSD, WSDL
XML Java Binding   	: JAXB
Framework Cofniguration	: Endpoint, WSDL-Generation
SOAP Webservice Client	: Wizdler


			 SOAP XML Request
			------------------> 
web service client				web service provider

			<------------------		  
			 SOAP XML Response


SOAP XML Request
-----------------

<soapenv:Envelope 
	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
	xmlns:ns2="http://pratap.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:GetCourseDetailsRequest>
		<ns2:id>course1</ns2:id>
      </ns2:GetCourseDetailsRequest>
   </soapenv:Body>
</soapenv:Envelope>




SOAP XML Response
-----------------

<soapenv:Envelope 
	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
	xmlns:ns2="http://pratap.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ns2:GetCourseDetailsResponse>
		<ns2:CourseDetails>
			<ns2:id>Course1</ns2:id>
			<ns2:name>Spring</ns2:name>
			<ns2:description>java framework</ns2:description>
		</ns2:CourseDetails>
      </ns2:GetCourseDetailsResponse>
   </soapenv:Body>
</soapenv:Envelope>



Service Definition 	: XML, XSD, WSDL
XML Java Binding   	: JAXB	
Framework Cofniguration	: Endpoint, WSDL-Generation
SOAP Webservice Client	: Wizdler




-------------------------------
Step #4: Define Request and Response XML Structure
-------------------------------

new > general > folder > 
		name : example files


Request.xml

      <ns2:GetCourseDetailsRequest xmlns="http://pratap.com/courses">
		<ns2:id>course1</ns2:id>
      </ns2:GetCourseDetailsRequest>


Response.xml

<GetCourseDetailsResponse xmlns="http://pratap.com/courses">
	<CourseDetails>
		<id>123</id>
		<name>spring</name>
		<description>Java Framework</description>
	</CourseDetails>
</GetCourseDetailsResponse>



-------------------------------
Step #5: Define XML Schema Definition(XSD) for Request - GetCourseDetailsRequest
-------------------------------


coursedetails.xsd
------------------
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://pratap.com/courses"
	xmlns:tns="http://pratap.com/courses"
	elementFormDefault="qualified">
	<element name="GetCourseDetailsRequest">
		<complexType>
			<sequence>
				<element name="id" type="integer"></element>
			</sequence>
		</complexType>
	</element>	
</schema>



request.xml
-----------
<?xml version="1.0" encoding="UTF-8"?>
<GetCourseDetailsRequest
	xmlns="http://pratap.com/courses"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pratap.com/courses coursedetails.xsd">
	<id>123</id>	
</GetCourseDetailsRequest>


-------------------------------
Step #6: Define XML Schema Definition(XSD) for Response - GetCourseDetailsResponse
-------------------------------

edit coursedetails.xsd
----------------------

	<element name="GetCourseDetailsResponse">
		<complexType>
			<sequence>
				<element name="CourseDetails" type="tns:CourseDetails"></element>
			</sequence>
		</complexType>
	</element>
	
	<complexType name="CourseDetails">
		<sequence>
			<element name="id" type="integer"/>
			<element name="name" type="string"/>
			<element name="description" type="string"/>
		</sequence>
	</complexType>


response.xml
------------
<GetCourseDetailsResponse
	xmlns="http://pratap.com/courses"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pratap.com/courses coursedetails.xsd">
	<CourseDetails>
		<id>123</id>
		<name>spring</name>
		<description>Java Framework</description>
	</CourseDetails>
</GetCourseDetailsResponse>




-------------------------------
Step #7: More about XML Schema Definition and Implementing XSD best practices
-------------------------------

http://edutechwiki.unige.ch/en/XML_Schema_tutorial_-_Basics


coursedetails.xsd
------------------
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://pratap.com/courses"
	xmlns:tns="http://pratap.com/courses"
	elementFormDefault="qualified">
	
	
	<xs:element name="GetCourseDetailsRequest">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="id" type="xs:integer"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="GetCourseDetailsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="CourseDetails" type="tns:CourseDetails"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:complexType name="CourseDetails">
		<xs:sequence>
			<xs:element name="id" type="xs:integer"/>
			<xs:element name="name" type="xs:string"/>
			<xs:element name="description" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



Lets make use of this xsd in our project, we would want to map java object to be able to create the xml that is defined in this xsd. i.e we need to do some binding.



-------------------------------
Step #8: Introduction to Java API for XML Binding (JAXB) and Configuring JAXB 2
-------------------------------



			 SOAP XML Request
			------------------> 
web service client				web service provider

			<------------------		  
			 SOAP XML Response




copy the coursedetails.xsd into src/main/resource folder

Lets create a java class based on the structure of the XSD , such that we can use the object of such java class to produce the requried xml.

For this we can use JAXB api.

Lets configure JAXB Maven plugin to perform the above activities for us.

Include the following plugin in pom.xml





<!-- JAXB2 Maven Plugin -->
<!-- XSD Source folder -->
<!-- Java Source folder -->
<!-- clear folder -> false -->

<plugin>
	<groupId>org.codehaus.mojo</groupId>
	<artifactId>jaxb2-maven-plugin</artifactId>
	<version>1.6</version>
	<executions>
		<execution>
			<id>xjc</id>
			<goals>
				<goal>xjc</goal>
			</goals>
		</execution>
	</executions>
	<configuration>
		<schemaDirectory>${project.basedir}/src/main/resources</schemaDirectory>
		<outputDirectory>${project.basedir}/src/main/java</outputDirectory>
		<clearOutputDir>false</clearOutputDir>
	</configuration>
</plugin>



Verify the Generated Java classes






-------------------------------
Step #9: Configuring an Endpoint for GetCourseDetailsRequest
-------------------------------

Lets create an Endpoint.
Endpoint is something that receives the request and processes it and sends the response back.
 
package com.pratap.soap;

@Endpoint
public class CourseDetailsEndpoint {
	// method
	// input - GetCourseDetailsRequest
	// output - GetCourseDetailsResponse
	
	// http://pratap.com/courses
	// GetCourseDetailsRequest
	@PayloadRoot(namespace = "http://pratap.com/courses" , localPart = "GetCourseDetailsRequest")
	@ResponsePayload
	public GetCourseDetailsResponse processCourseDetailsRequest(@RequestPayload GetCourseDetailsRequest request) {
		
		GetCourseDetailsResponse response = new GetCourseDetailsResponse();
		
		CourseDetails courseDetails = new CourseDetails();
		courseDetails.setId(request.getId());
		courseDetails.setName("Microservice course");
		courseDetails.setDescription("A Wonderful course");
		
		response.setCourseDetails(courseDetails);
		
		return response;
	}
}



 
-------------------------------
Step #10: Spring Webservices Configuration - MessageDispatcherServlet
-------------------------------

package com.pratap.soap;

// Enable spring webservice
// Spring configuration

@Configuration
@EnableWs
public class WebServiceConfig {
	
	// MessageDispatcherServlet
		// ApplicationContext
	// url -> /ws/*
	
	@Bean
	public ServletRegistrationBean<Servlet>  messageDispatcherServlet(ApplicationContext context) {
		MessageDispatcherServlet messageDispatcherServlet = new MessageDispatcherServlet();
		messageDispatcherServlet.setApplicationContext(context);
		messageDispatcherServlet.setTransformWsdlLocations(true);
		return new ServletRegistrationBean<Servlet>(messageDispatcherServlet , "/ws/*");
	}
}





-------------------------------
Step #10: Spring Webservices Configuration - Generating WSDL
-------------------------------

// Enable spring webservice
// Spring configuration

@Configuration
@EnableWs
public class WebServiceConfig {
	
	// MessageDispatcherServlet
		// ApplicationContext
	// url -> /ws/*
	
	@Bean
	public ServletRegistrationBean<Servlet>  messageDispatcherServlet(ApplicationContext context) {
		MessageDispatcherServlet messageDispatcherServlet = new MessageDispatcherServlet();
		messageDispatcherServlet.setApplicationContext(context);
		messageDispatcherServlet.setTransformWsdlLocations(true);
		return new ServletRegistrationBean<Servlet>(messageDispatcherServlet , "/ws/*");
	}
	
	// courses.wsdl
	// /ws/courses.wsdl
	
		// PortType	- CoursePort
		// Namespace - http://pratap.com/courses
	// coursedetails.xsd
	@Bean(name = "courses")
	public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema courseSchema) {
		DefaultWsdl11Definition definition = new DefaultWsdl11Definition();
		// PortType - CoursePort
		definition.setPortTypeName("CoursePort");
		// Namespace - http://pratap.com/courses
		definition.setTargetNamespace("http://pratap.com/courses");
		// uri - /ws
		definition.setLocationUri("/ws");
		// schema
		definition.setSchema(courseSchema);
		
		return definition;
	}
	
	@Bean
	public XsdSchema coursesSchema() {
		return new SimpleXsdSchema(new ClassPathResource("coursedetails.xsd"));
	}	
}




Run the application : 

If you receive any error : java.lang.NoClassDefFoundError: javax/wsdl/factory/WSDLFactory

include the following maven dependency

<dependency>
	<groupId>wsdl4j</groupId>
	<artifactId>wsdl4j</artifactId>
</dependency>



-------------------------------
Step #12: Using Wizdler to execute SOAP Request
-------------------------------

You can also use SOAP UI


Wizdler plugin chrome

http://localhost:8080/ws/courses.wsdl


After installing Wizdler plugin, once you visit WSDL URL, 
Wizdler will show you the available endpoints

Just follow the link.




-------------------------------
Step #13: Implementing a Service - CourseDetialsService 
-------------------------------

package com.pratap.soap.bean;

public class Course {
	private int id;
	private String name;
	private String description;

	public Course() {
	}

	public Course(int id, String name, String description) {
		super();
		this.id = id;
		this.name = name;
		this.description = description;
	}

	// setters & getters & toString
}


package com.pratap.soap.service;
@Service
public class CourseDetailsService {

	private static List<Course> courses = new ArrayList<>();
	static {
		Course course1 = new Course(1, "Core Spring", "The foundation for Spring");
		courses.add(course1);

		Course course2 = new Course(2, "Adv Spring", "The Advanced Spring");
		courses.add(course2);

		Course course3 = new Course(3, "DevOps", "Development & Operations");
		courses.add(course3);
	}

	public Course findById(int id) {
		for (Course course : courses) {
			if (course.getId() == id) {
				return course;
			}
		}
		return null;
	}

	public List<Course> findAll() {
		return courses;
	}

	public int deleteById(int id) {
		Iterator<Course> iterator = courses.iterator();
		while (iterator.hasNext()) {
			Course course = iterator.next();
			if (course.getId() == id) {
				iterator.remove();
				return 1;
			}
		}
		return 0;
	}
}



package com.pratap.soap;

@Endpoint
public class CourseDetailsEndpoint {

	@Autowired
	CourseDetailsService service;

	@PayloadRoot(namespace = "http://pratap.com/courses", localPart = "GetCourseDetailsRequest")
	@ResponsePayload
	public GetCourseDetailsResponse processCourseDetailsRequest(@RequestPayload GetCourseDetailsRequest request) {

		GetCourseDetailsResponse response = new GetCourseDetailsResponse();

		Course course = service.findById(request.getId());

		CourseDetails courseDetails = new CourseDetails();
		courseDetails.setId(course.getId());
		courseDetails.setName(course.getName());
		courseDetails.setDescription(course.getDescription());

		response.setCourseDetails(courseDetails);

		return response;
	}
}




Refactoring CourseDetailsEndpoint.java
---------------------------------------
package com.pratap.soap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import com.pratap.courses.CourseDetails;
import com.pratap.courses.GetCourseDetailsRequest;
import com.pratap.courses.GetCourseDetailsResponse;
import com.pratap.soap.bean.Course;
import com.pratap.soap.service.CourseDetailsService;

@Endpoint
public class CourseDetailsEndpoint {

	@Autowired
	CourseDetailsService service;

	@PayloadRoot(namespace = "http://pratap.com/courses", localPart = "GetCourseDetailsRequest")
	@ResponsePayload
	public GetCourseDetailsResponse processCourseDetailsRequest(@RequestPayload GetCourseDetailsRequest request) {

		Course course = service.findById(request.getId());
		return mapCourse(course);
	}

	private GetCourseDetailsResponse mapCourse(Course course) {
		GetCourseDetailsResponse response = new GetCourseDetailsResponse();
		CourseDetails courseDetails = new CourseDetails();
		courseDetails.setId(course.getId());
		courseDetails.setName(course.getName());
		courseDetails.setDescription(course.getDescription());

		response.setCourseDetails(courseDetails);

		return response;
	}
}





-------------------------------
Step #14: Implementing SOAP Web Service for GetAllCourseDetailsRequest
-------------------------------
Lets create a copy of course-management as course-management-2


edit the coursedetails.xsd
--------------------------
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://pratap.com/courses"
	xmlns:tns="http://pratap.com/courses"
	elementFormDefault="qualified">
	
	
	<xs:element name="GetCourseDetailsRequest">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="id" type="xs:int"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="GetCourseDetailsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="CourseDetails" type="tns:CourseDetails"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	
	<xs:element name="GetAllCourseDetailsRequest">
		<xs:complexType>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="GetAllCourseDetailsResponse">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="CourseDetails" type="tns:CourseDetails" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	
	<xs:complexType name="CourseDetails">
		<xs:sequence>
			<xs:element name="id" type="xs:int"/>
			<xs:element name="name" type="xs:string"/>
			<xs:element name="description" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
</xs:schema>



CourseDetailsEndpoint.java
--------------------------
@Endpoint
public class CourseDetailsEndpoint {

	@Autowired
	CourseDetailsService service;

	@PayloadRoot(namespace = "http://pratap.com/courses", localPart = "GetCourseDetailsRequest")
	@ResponsePayload
	public GetCourseDetailsResponse processCourseDetailsRequest(@RequestPayload GetCourseDetailsRequest request) {
		Course course = service.findById(request.getId());
		return mapCourseDetails(course);
	}

	@PayloadRoot(namespace = "http://pratap.com/courses", localPart = "GetAllCourseDetailsRequest")
	@ResponsePayload
	public GetAllCourseDetailsResponse processAllCourseDetailsRequest(
			@RequestPayload GetAllCourseDetailsRequest request) {

		List<Course> courses = service.findAll();
		return mapAllCourseDetails(courses);
	}

	private GetAllCourseDetailsResponse mapAllCourseDetails(List<Course> courses) {
		GetAllCourseDetailsResponse response = new GetAllCourseDetailsResponse();

		for (Course course : courses) {
			CourseDetails mapCourse = mapCourse(course);
			response.getCourseDetails().add(mapCourse);
		}

		return response;
	}

	private GetCourseDetailsResponse mapCourseDetails(Course course) {
		GetCourseDetailsResponse response = new GetCourseDetailsResponse();

		response.setCourseDetails(mapCourse(course));

		return response;
	}

	private CourseDetails mapCourse(Course course) {
		CourseDetails courseDetails = new CourseDetails();
		courseDetails.setId(course.getId());
		courseDetails.setName(course.getName());
		courseDetails.setDescription(course.getDescription());
		return courseDetails;
	}
}


Run the application 
http://localhost:8080/ws/courses.wsdl




-------------------------------
Step #15: Implementing SOAP Web Service for DeleteCourseDetailsRequest
-------------------------------




-------------------------------
Step #16: Improving DeleteCourseDetailsRequest - Using an Enum for Status
-------------------------------




-------------------------------
Step #17: Exception Handling and SOAP Fault Response
-------------------------------




